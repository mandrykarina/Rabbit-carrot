#include <curses.h>
#include <locale.h>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <cmath>
#include <initializer_list>
#include <iostream>

template <int n, typename T>
class Matrix
{
private:
    T data[n];

public:
    // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    Matrix()
    {
        for (int i = 0; i < n; ++i)
            data[i] = T();
    }

    // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Å–ø–∏—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–π
    Matrix(std::initializer_list<T> values)
    {
        int i = 0;
        for (T v : values)
        {
            if (i < n)
                data[i++] = v;
        }
        for (; i < n; ++i)
            data[i] = T();
    }

    T &operator[](int index) { return data[index]; }
    const T &operator[](int index) const { return data[index]; }

    Matrix<n, T> operator+(const Matrix<n, T> &other) const
    {
        Matrix<n, T> result;
        for (int i = 0; i < n; ++i)
            result[i] = data[i] + other[i];
        return result;
    }

    Matrix<n, T> operator-(const Matrix<n, T> &other) const
    {
        Matrix<n, T> result;
        for (int i = 0; i < n; ++i)
            result[i] = data[i] - other[i];
        return result;
    }

    Matrix<n, T> operator*(T scalar) const
    {
        Matrix<n, T> result;
        for (int i = 0; i < n; ++i)
            result[i] = data[i] * scalar;
        return result;
    }

    bool operator==(const Matrix<n, T> &other) const
    {
        for (int i = 0; i < n; ++i)
            if (data[i] != other[i])
                return false;
        return true;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    T x() const { return data[0]; }
    T y() const { return data[1]; }
};

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const int WIDTH = 140;
const int HEIGHT = 40;
const int BASE_SPEED = 180;
const int MAX_ITEMS = 6;
const int SPEED_STEP = 20;
const int SPEED_INTERVAL = 20;

#define RABBIT L"üêá"
#define CARROT L"ü•ï"
#define CABBAGE L"ü•¨"
#define BONE L"‚ò†"
#define HEART L"‚ù§"
#define TIGER L"üêØ"

enum ItemType
{
    CARROT_TYPE,
    CABBAGE_TYPE,
    BONE_TYPE
};

// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–≥—Ä–µ
struct Item
{
    Matrix<2, int> pos; // –•—Ä–∞–Ω–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
    ItemType type;
    int fall_timer; // –¢–∞–π–º–µ—Ä, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
};

class Tiger
{
public:
    Matrix<2, int> pos; // –ø–æ–∑–∏—Ü–∏—è —Ç–∏–≥—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    bool active;        // –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–∏–≥—Ä
    time_t appear_time; // –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª—Å—è
    int duration;       // —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Ç–∏–≥—Ä –∞–∫—Ç–∏–≤–µ–Ω

    // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    Tiger() : active(false), pos({-1, -1}), appear_time(0), duration(7) {}

    void spawn()
    {
        // –ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ —ç–∫—Ä–∞–Ω–∞
        pos[0] = rand() % WIDTH;
        pos[1] = rand() % HEIGHT;
        active = true;
        appear_time = time(nullptr);
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∏–≥—Ä–∞ –∏ —É–±–∏—Ä–∞–µ—Ç –µ–≥–æ —Å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    void deactivate()
    {
        active = false;
        pos = {-1, -1};
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–∏–≥—Ä –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
    bool is_active() const
    {
        if (!active)
            return false;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        time_t now = time(nullptr);
        if (now - appear_time >= duration)
        {
            return false;
        }
        return true;
    }

    // –î–≤–∏–≥–∞–µ—Ç —Ç–∏–≥—Ä–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    void move_towards(const Matrix<2, int> &target)
    {
        if (!active)
            return;

        // –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–∏–≥—Ä–∞: –¥–≤–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–∞–¥—Ä (—á–µ—Ä–µ–∑ —Ä–∞–Ω–¥–æ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        static int frame_count = 0;
        frame_count++;
        if (frame_count % 2 != 0)
            return; // –¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–∞–¥—Ä

        int dx = target[0] - pos[0];
        int dy = target[1] - pos[1];

        // –î–≤–∏–∂–µ–º—Å—è –ø–æ –æ—Å–∏ X
        if (dx != 0)
            pos[0] += (dx > 0) ? 1 : -1;

        // –î–≤–∏–∂–µ–º—Å—è –ø–æ –æ—Å–∏ Y
        if (dy != 0)
            pos[1] += (dy > 0) ? 1 : -1;

        // –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        if (pos[0] < 0)
            pos[0] = 0;
        if (pos[0] >= WIDTH)
            pos[0] = WIDTH - 1;
        if (pos[1] < 0)
            pos[1] = 0;
        if (pos[1] >= HEIGHT)
            pos[1] = HEIGHT - 1;
    }
};

class Game
{
private:
    Matrix<2, int> player_pos; // –ø–æ–∑–∏—Ü–∏—è –∫—Ä–æ–ª–∏–∫–∞
    int score;                 // –æ—á–∫–∏ –∫—Ä–æ–ª–∏–∫–∞
    int lives;                 // –∂–∏–∑–Ω–∏
    int difficulty;            // —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
    int game_speed;            // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏)
    bool game_over;            // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    std::vector<Item> items;   // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä Item
    time_t start_time;         // –§–∏–∫—Å–∏—Ä—É–µ—Ç –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    time_t last_speedup;       // –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏

    Tiger tiger;             // –æ–±—ä–µ–∫—Ç —Ç–∏–≥—Ä–∞
    time_t last_tiger_spawn; // –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∏–≥—Ä–∞

public:
    // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    Game(int diff) : difficulty(diff), score(0), lives(3), game_over(false), last_tiger_spawn(0)
    {
        player_pos = {WIDTH / 2, HEIGHT / 2};
        game_speed = BASE_SPEED + (3 - difficulty) * 100;
        init_curses();
        start_time = time(nullptr);
        last_speedup = start_time;
    }

    void init_curses()
    {
        setlocale(LC_ALL, "");
        initscr();
        cbreak();
        noecho();              // –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
        keypad(stdscr, TRUE);  // –≤–∫–ª —Å—Ç—Ä–µ–ª–æ—á–∫–∏
        nodelay(stdscr, TRUE); // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–µ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∞–∂–µ –±–µ–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        curs_set(0);           // –û—Ç–∫–ª—é—á–∞–µ—Ç –∫—É—Ä—Å–æ—Ä
        start_color();         // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–≤–µ—Ç–æ–≤
        use_default_colors();
        init_pair(1, COLOR_WHITE, COLOR_BLACK);
        init_pair(2, COLOR_RED, COLOR_BLACK);
        init_pair(3, COLOR_GREEN, COLOR_BLACK);
        init_pair(4, COLOR_MAGENTA, COLOR_BLACK);
        init_pair(5, COLOR_YELLOW, COLOR_BLACK);
    }

    // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ
    void spawn_item()
    {
        // –ü–æ–¥—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Å—Ç–µ–π
        int bone_count = 0;
        for (const auto &item : items)
        {
            if (item.type == BONE_TYPE)
            {
                bone_count++;
            }
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if ((int)items.size() < MAX_ITEMS + difficulty + 6)
        {
            int rand_type = rand() % 100;

            ItemType itype;
            if (rand_type < 40)
                itype = CARROT_TYPE; // 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            else if (rand_type < 65)
                itype = CABBAGE_TYPE; // 25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            else
                itype = BONE_TYPE; // 35% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
            int group_size = (itype == BONE_TYPE && bone_count < 12) ? (1 + rand() % 3) : 1;

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            for (int i = 0; i < group_size; ++i)
            {
                int x = rand() % (WIDTH - 1);
                int y = 0;
                items.push_back({Matrix<2, int>{x, y}, itype, 0});
            }
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    void draw_ui()
    {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–¥–ø–∏—Å–∏ "Lives:"
        attron(COLOR_PAIR(1));     // –í–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞—Ä—É 1 (–±–µ–ª—ã–π —Ç–µ–∫—Å—Ç)
        mvprintw(0, 0, "Lives: "); // –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ (0,0)

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ä–¥–µ—á–µ–∫
        attron(COLOR_PAIR(2)); // –í–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞—Ä—É 2 (–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        for (int i = 0; i < lives; i++)
            addwstr(HEART);     // –í—ã–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª —Å–µ—Ä–¥—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∂–∏–∑–Ω–∏
        attroff(COLOR_PAIR(2)); // –û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞—Ä—É 2

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—á—ë—Ç–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        attron(COLOR_PAIR(1));                        // –°–Ω–æ–≤–∞ –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
        mvprintw(1, 0, "Score: %d", score);           // –°—á—ë—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ (1,0)
        mvprintw(2, 0, "Difficulty: %d", difficulty); // –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ (2,0)
    }

    // –†–∏—Å—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑—É –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    void draw_border()
    {
        for (int i = 0; i < WIDTH; i++)
        {
            mvaddwstr(HEIGHT + 1, i, L"‚îÄ");
        }
    }

    // –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã
    void update_speed()
    {
        time_t now = time(nullptr);
        if (now - last_speedup >= SPEED_INTERVAL)
        {
            if (game_speed > 60)
                game_speed -= SPEED_STEP;
            last_speedup = now;
        }
    }

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    void update()
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –∏ WASD –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—Ä–æ–ª–∏–∫–∞
        int ch = getch(); // –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (ch == KEY_LEFT || ch == 'a' || ch == 'A')
            if (player_pos[0] > 0)
                player_pos[0]--;
        if (ch == KEY_RIGHT || ch == 'd' || ch == 'D')
            if (player_pos[0] < WIDTH - 1)
                player_pos[0]++;
        if (ch == KEY_UP || ch == 'w' || ch == 'W')
            if (player_pos[1] > 0)
                player_pos[1]--;
        if (ch == KEY_DOWN || ch == 's' || ch == 'S')
            if (player_pos[1] < HEIGHT - 1)
                player_pos[1]++;
        if (ch == 27)
        {
            game_over = true;
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for (auto &item : items)
        {
            item.fall_timer--;
            if (item.fall_timer <= 0)
            {
                item.pos[1]++;
                item.fall_timer = (item.type == BONE_TYPE) ? 1 : 2; // –ö–æ—Å—Ç–∏ –ø–∞–¥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –∏–≥—Ä–æ–∫–æ–º
            if (std::abs(player_pos[0] - item.pos[0]) <= 1 && std::abs(player_pos[1] - item.pos[1]) <= 1)
            {
                switch (item.type)
                {
                case CARROT_TYPE:
                    score += 20 * difficulty;
                    break;
                case CABBAGE_TYPE:
                    score += 10 * difficulty;
                    break;
                case BONE_TYPE:
                    lives--;
                    if (lives <= 0)
                        game_over = true;
                    break;
                }
                item.pos = {-1, -1}; // —É–±–∏—Ä–∞–µ–º —Å —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –±—ã–ª–æ
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
            if (item.pos[1] >= HEIGHT)
            {
                item.pos = {-1, -1};
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ "—Å–æ–±—Ä–∞–Ω–Ω—ã—Ö" –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        std::vector<Item> new_items;
        for (Item &item : items)
        {
            if (item.pos != Matrix<2, int>{-1, -1})
            {
                new_items.push_back(item);
            }
        }
        items = new_items;

        spawn_item();   // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        update_speed(); // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã

        // –õ–æ–≥–∏–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∏–≥—Ä–∞
        time_t now = time(nullptr);
        if (!tiger.active && now - last_tiger_spawn > 10 + rand() % 20)
        {
            tiger.spawn();
            last_tiger_spawn = now;
        }

        // –ï—Å–ª–∏ —Ç–∏–≥—Ä –∞–∫—Ç–∏–≤–µ–Ω - –¥–≤–∏–≥–∞–µ–º –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
        if (tiger.is_active())
        {
            tiger.move_towards(player_pos);

            // –ï—Å–ª–∏ —Ç–∏–≥—Ä –¥–æ–≥–Ω–∞–ª –∏–≥—Ä–æ–∫–∞ - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            if (tiger.pos == player_pos)
            {
                lives = 0;
                game_over = true;
            }
        }
        else if (tiger.active)
        {
            // –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∏–≥—Ä–∞ –≤—ã—à–ª–æ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            tiger.deactivate();
        }
    }

    // –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –∏–≥—Ä–µ
    void render()
    {
        clear();

        // –†–∏—Å—É–µ–º –∑–∞–π—Ü–∞
        attron(COLOR_PAIR(1));
        mvaddwstr(player_pos[1], player_pos[0], RABBIT);

        // –†–∏—Å—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        for (auto &item : items)
        {
            switch (item.type)
            {
            case CARROT_TYPE:
                attron(COLOR_PAIR(2));
                mvaddwstr(item.pos[1], item.pos[0], CARROT);
                break;
            case CABBAGE_TYPE:
                attron(COLOR_PAIR(3));
                mvaddwstr(item.pos[1], item.pos[0], CABBAGE);
                break;
            case BONE_TYPE:
                attron(COLOR_PAIR(4));
                mvaddwstr(item.pos[1], item.pos[0], BONE);
                break;
            }
        }

        // –†–∏—Å—É–µ–º —Ç–∏–≥—Ä–∞ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if (tiger.is_active())
        {
            attron(COLOR_PAIR(5));
            mvaddwstr(tiger.pos[1], tiger.pos[0], TIGER);
        }

        draw_border();
        draw_ui();
        refresh();
        timeout(game_speed); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
    }

    bool is_game_over() const
    {
        return game_over;
    }

    int get_score() const
    {
        return score;
    }

    void run()
    {
        while (!game_over)
        {
            update();
            render();
        }

        // –í—ã–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏ –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –∏–≥—Ä—ã
        clear();
        mvprintw(HEIGHT / 2, (WIDTH - 20) / 2, "Game Over! Your score: %d", score);
        mvprintw(HEIGHT / 2 + 1, (WIDTH - 35) / 2, "Press any key to return to menu...");
        refresh();
        nodelay(stdscr, FALSE);
        getch();
    }

    ~Game()
    {
        endwin();
    }
};

int main()
{
    srand(time(nullptr)); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º

    while (true)
    {
        setlocale(LC_ALL, "");
        initscr();
        noecho();
        curs_set(0);
        keypad(stdscr, TRUE);

        clear();
        mvprintw(10, 40, "Carrot Catcher");
        mvprintw(12, 40, "Select difficulty:");
        mvprintw(14, 40, "1 - Easy");
        mvprintw(15, 40, "2 - Medium");
        mvprintw(16, 40, "3 - Hard");
        mvprintw(17, 40, "4 - Exit");

        int choice = getch();

        if (choice == '4' || choice == 'q' || choice == 'Q')
        {
            endwin();
            break;
        }

        int diff = 1;
        if (choice == '1')
            diff = 1;
        else if (choice == '2')
            diff = 2;
        else if (choice == '3')
            diff = 3;
        else
            continue;

        endwin(); // –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å ncurses (–¥–ª—è –º–µ–Ω—é)

        Game game(diff); // –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
        game.run();      // –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    }

    return 0;
}
